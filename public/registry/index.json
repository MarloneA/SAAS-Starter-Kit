{
  "components": [
    {
      "name": "chat-bubble",
      "dependencies": [
        "message-loading"
      ],
      "files": [
        {
          "name": "chat-bubble.tsx",
          "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\"\nimport MessageLoading from \"./message-loading\"\n\n// ChatBubble\nconst chatBubbleVariant = cva(\n  \"flex gap-2 max-w-[60%] items-end relative\",\n  {\n    variants: {\n      variant: {\n        received: \"self-start\",\n        sent: \"self-end flex-row-reverse\",\n      },\n      layout: {\n        \"default\": \"\",\n        \"ai\": \"max-w-full w-full items-center\"\n      }\n    },\n    defaultVariants: {\n      variant: \"received\",\n      layout: \"default\"\n    }\n  }\n)\n\ninterface ChatBubbleProps extends React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof chatBubbleVariant> { }\n\nconst ChatBubble = React.forwardRef<HTMLDivElement, ChatBubbleProps>(\n  ({ className, variant, layout, children, ...props }, ref) => (\n    <div\n      className={cn(chatBubbleVariant({ variant, layout, className }))}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n)\nChatBubble.displayName = \"ChatBubble\"\n\n// ChatBubbleAvatar\ninterface ChatBubbleAvatarProps {\n  src?: string\n  fallback?: string\n  className?: string\n}\n\nconst ChatBubbleAvatar: React.FC<ChatBubbleAvatarProps> = ({ src, fallback, className }) => (\n  <Avatar className={className}>\n    <AvatarImage src={src} alt=\"Avatar\" />\n    <AvatarFallback>{fallback}</AvatarFallback>\n  </Avatar>\n)\n\n// ChatBubbleMessage\nconst chatBubbleMessageVariants = cva(\n  \"p-4\",\n  {\n    variants: {\n      variant: {\n        received: \"bg-secondary text-secondary-foreground rounded-r-lg rounded-tl-lg\",\n        sent: \"bg-primary text-primary-foreground rounded-l-lg rounded-tr-lg\",\n      },\n      layout: {\n        \"default\": \"\",\n        \"ai\": \"border-t w-full rounded-none bg-transparent\"\n      }\n    },\n    defaultVariants: {\n      variant: \"received\",\n      layout: \"default\"\n    }\n  }\n)\n\ninterface ChatBubbleMessageProps extends React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof chatBubbleMessageVariants> {\n  isLoading?: boolean\n}\n\nconst ChatBubbleMessage = React.forwardRef<HTMLDivElement, ChatBubbleMessageProps>(\n  ({ className, variant, layout, isLoading = false, children, ...props }, ref) => (\n    <div\n      className={cn(chatBubbleMessageVariants({ variant, layout, className }), 'break-words max-w-full whitespace-pre-wrap')}\n      ref={ref}\n      {...props}\n    >\n      {isLoading ? (\n        <div className=\"flex items-center space-x-2\">\n          <MessageLoading />\n        </div>\n      ) : (\n        children\n      )}\n    </div>\n  )\n)\nChatBubbleMessage.displayName = \"ChatBubbleMessage\"\n\n// ChatBubbleTimestamp\ninterface ChatBubbleTimestampProps extends React.HTMLAttributes<HTMLDivElement> {\n  timestamp: string\n}\n\nconst ChatBubbleTimestamp: React.FC<ChatBubbleTimestampProps> = ({ timestamp, className, ...props }) => (\n  <div className={cn(\"text-xs mt-2 text-right\", className)} {...props}>\n    {timestamp}\n  </div>\n)\n\nexport {\n  ChatBubble,\n  ChatBubbleAvatar,\n  ChatBubbleMessage,\n  ChatBubbleTimestamp,\n  chatBubbleVariant,\n  chatBubbleMessageVariants\n}"
        }
      ],
      "type": "components:ui"
    },
    {
      "name": "chat-input",
      "dependencies": [],
      "files": [
        {
          "name": "chat-input.tsx",
          "content": "import * as React from \"react\"\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatInputProps {\n  className?: string\n  value?: string\n  onKeyDown?: (event: React.KeyboardEvent<HTMLTextAreaElement>) => void\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void\n  placeholder?: string\n}\n\nconst ChatInput = React.forwardRef<HTMLTextAreaElement, ChatInputProps>(({ className, value, onKeyDown, onChange, placeholder, ...props }, ref) => (\n  <Textarea\n    autoComplete=\"off\"\n    value={value}\n    ref={ref}\n    onKeyDown={onKeyDown}\n    onChange={onChange}\n    name=\"message\"\n    placeholder={placeholder}\n    className={cn(\"max-h-12 px-4 py-3 bg-background text-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 w-full rounded-md flex items-center h-16 resize-none\",\n      className)}\n    {...props}\n  />\n))\nChatInput.displayName = \"ChatInput\"\n\nexport { ChatInput }"
        }
      ]
    },
    {
      "name": "chat-message-list",
      "dependencies": [],
      "files": [
        {
          "name": "chat-message-list.tsx",
          "content": "import * as React from \"react\"\nimport { cn } from \"@/lib/utils\";\n\ninterface ChatMessageListProps extends React.HTMLAttributes<HTMLDivElement> {\n}\n\nconst ChatMessageList = React.forwardRef<HTMLDivElement, ChatMessageListProps>(\n  ({ className, children, ...props }, ref) => (\n    <div\n      className={cn(\"flex flex-col w-full h-full p-4 gap-6 overflow-y-auto\", className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  ));\n\nChatMessageList.displayName = \"ChatMessageList\";\n\nexport { ChatMessageList };"
        }
      ]
    },
    {
      "name": "expandable-chat",
      "dependencies": [],
      "files": [
        {
          "name": "expandable-chat.tsx",
          "content": "'use client'\n\nimport React, { useRef, useState } from 'react'\nimport { X, MessageCircle } from \"lucide-react\"\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\nexport type ChatPosition = 'bottom-right' | 'bottom-left'\nexport type ChatSize = 'sm' | 'md' | 'lg' | 'xl' | 'full'\n\nconst chatConfig = {\n  dimensions: {\n    sm: 'sm:max-w-sm sm:max-h-[500px]',\n    md: 'sm:max-w-md sm:max-h-[600px]',\n    lg: 'sm:max-w-lg sm:max-h-[700px]',\n    xl: 'sm:max-w-xl sm:max-h-[800px]',\n    full: 'sm:w-full sm:h-full'\n  },\n  positions: {\n    'bottom-right': 'bottom-5 right-5',\n    'bottom-left': 'bottom-5 left-5',\n  },\n  chatPositions: {\n    'bottom-right': 'sm:bottom-[calc(100%+10px)] sm:right-0',\n    'bottom-left': 'sm:bottom-[calc(100%+10px)] sm:left-0',\n  },\n  states: {\n    open: \"pointer-events-auto opacity-100 visible scale-100 translate-y-0\",\n    closed: \"pointer-events-none opacity-0 invisible scale-100 sm:translate-y-5\"\n  }\n}\n\ninterface ExpandableChatProps extends React.HTMLAttributes<HTMLDivElement> {\n  position?: ChatPosition\n  size?: ChatSize\n  icon?: React.ReactNode\n}\n\nconst ExpandableChat: React.FC<ExpandableChatProps> = ({\n  className,\n  position = 'bottom-right',\n  size = 'md',\n  icon,\n  children,\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const chatRef = useRef<HTMLDivElement>(null)\n\n  const toggleChat = () => setIsOpen(!isOpen)\n\n  return (\n    <div\n      className={cn(`fixed ${chatConfig.positions[position]} z-50`, className)}\n      {...props}\n    >\n      <div\n        ref={chatRef}\n        className={cn(\n          \"flex flex-col bg-background border sm:rounded-lg shadow-md overflow-hidden transition-all duration-250 ease-out sm:absolute sm:w-[90vw] sm:h-[80vh] fixed inset-0 w-full h-full sm:inset-auto\",\n          chatConfig.chatPositions[position],\n          chatConfig.dimensions[size],\n          isOpen ? chatConfig.states.open : chatConfig.states.closed,\n          className\n        )}\n      >\n        {children}\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-2 right-2 sm:hidden\"\n          onClick={toggleChat}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      <ExpandableChatToggle icon={icon} isOpen={isOpen} toggleChat={toggleChat} />\n    </div>\n  )\n}\n\n\nExpandableChat.displayName = \"ExpandableChat\"\n\nconst ExpandableChatHeader: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (\n  <div className={cn(\"flex items-center justify-between p-4 border-b\", className)} {...props} />\n)\n\nExpandableChatHeader.displayName = \"ExpandableChatHeader\"\n\nconst ExpandableChatBody: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (\n  <div className={cn(\"flex-grow overflow-y-auto\", className)} {...props} />\n)\n\nExpandableChatBody.displayName = \"ExpandableChatBody\"\n\nconst ExpandableChatFooter: React.FC<React.HTMLAttributes<HTMLDivElement>> = ({ className, ...props }) => (\n  <div className={cn(\"border-t p-4\", className)} {...props} />\n)\n\nExpandableChatFooter.displayName = \"ExpandableChatFooter\"\n\ninterface ExpandableChatToggleProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  icon?: React.ReactNode\n  isOpen: boolean\n  toggleChat: () => void\n}\n\nconst ExpandableChatToggle: React.FC<ExpandableChatToggleProps> = ({\n  className,\n  icon,\n  isOpen,\n  toggleChat,\n  ...props\n}) => (\n  <Button\n    variant='default'\n    onClick={toggleChat}\n    className={cn(\n      \"w-14 h-14 rounded-full shadow-md flex items-center justify-center hover:shadow-lg hover:shadow-black/30 transition-all duration-300\",\n      className\n    )}\n    {...props}\n  >\n    {isOpen ? <X className=\"h-6 w-6\" /> : icon || <MessageCircle className=\"h-6 w-6\" />}\n  </Button>\n)\n\nExpandableChatToggle.displayName = \"ExpandableChatToggle\"\n\nexport {\n  ExpandableChat,\n  ExpandableChatHeader,\n  ExpandableChatBody,\n  ExpandableChatFooter,\n}"
        }
      ]
    }
  ],
  "hiddenComponents": [
    {
      "name": "message-loading",
      "dependencies": [],
      "files": [
        {
          "name": "message-loading.tsx",
          "content": "export default function MessageLoading() {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"text-foreground\"\n    >\n      <circle cx=\"4\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_qFRN\"\n          begin=\"0;spinner_OcgL.end+0.25s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          begin=\"spinner_qFRN.begin+0.1s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n      <circle cx=\"20\" cy=\"12\" r=\"2\" fill=\"currentColor\">\n        <animate\n          id=\"spinner_OcgL\"\n          begin=\"spinner_qFRN.begin+0.2s\"\n          attributeName=\"cy\"\n          calcMode=\"spline\"\n          dur=\"0.6s\"\n          values=\"12;6;12\"\n          keySplines=\".33,.66,.66,1;.33,0,.66,.33\"\n        />\n      </circle>\n    </svg>\n  )\n}"
        }
      ],
      "type": "components:ui"
    }
  ]
}